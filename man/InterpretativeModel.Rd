% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/InterpretativeModel.R
\name{InterpretativeModel}
\alias{InterpretativeModel}
\title{Interpretative Model}
\usage{
InterpretativeModel(ModelResult, traindata, trainlabel, newdata = NULL)
}
\arguments{
\item{ModelResult}{Model result.}

\item{trainlabel}{Lable of train dataset .}

\item{newdata}{one slice data.}

\item{train}{Train data without lablee.}
}
\value{
Return the interpretation of Model.
}
\description{
Interpretative Model,This function is base on DALEXtra packages.
}
\examples{
library(bupaR)
library(ppmr)
eventdata <- enrichEventlog(eventLog = patients,prefix_num = 4,mode = "activity")
enrichEventlogEncoding <- lastStateEncoding(prefix_eventLog = eventdata)
enrichEventlogEncoding.1 <- enrichEventlogEncoding \%>\% as.data.frame()
enrichEventlogEncoding.1 <- enrichEventlogEncoding.1 \%>\% select(-patient,-handling_id,-.order,-registration_type)
library(lubridate)
enrichEventlogEncoding.1 <- enrichEventlogEncoding.1 \%>\% mutate(year=year(time),month=month(time),day = day(time),week = week(time),hour = hour(time))
enrichEventlogEncoding.1 <- enrichEventlogEncoding.1 \%>\% select(-time)
enrichEventlogEncoding.1 <- enrichEventlogEncoding.1 \%>\% filter(!is.na(predicate))
enrichEventlogEncoding.1$predicate <- enrichEventlogEncoding.1$predicate \%>\% as.character() \%>\% as.factor()
EventLogModel <- BuildModel(TheModel = rand_forest,engine = "ranger",PrefixData = enrichEventlogEncoding.1,predictmode = "classification")
pre <- predict(object = EventLogModel[[3]], EventLogModel[["test"]],type = "class")
result <- InterpretativeModel(ModelResult = EventLogModel[[3]],traindata=EventLogModel[[1]][,-3],trainlabel = EventLogModel[[1]][,3],newdata = EventLogModel[[2]][1,])
}
